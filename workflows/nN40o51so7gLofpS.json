{
  "active": false,
  "connections": {
    "gpt-4o-mini1": {
      "ai_languageModel": [
        []
      ]
    },
    "YouTube Video Agent": {
      "main": [
        []
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Processing Tool": {
      "ai_tool": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "YouTube Video Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Respond with YouTube Details & Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Translate-text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate-text": {
      "main": [
        [
          {
            "node": "Respond with YouTube Details & Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-23T22:23:42.401Z",
  "id": "nN40o51so7gLofpS",
  "meta": {
    "templateId": "2956",
    "templateCredsSetupCompleted": true
  },
  "name": "‚ö°üìΩÔ∏è Ultimate AI-Powered Chatbot for YouTube Summarization & Analysis",
  "nodes": [
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "{\n  \"query\": {\n\t\"videoId\": \"YouTube video id\"\n  }\n}"
      },
      "id": "a7b7740e-7470-4ce0-a698-6043559eb781",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        500,
        1280
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f6c6cbc2-ba2d-4f16-a3f2-ad4d6280f6b6",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        840,
        480
      ],
      "webhookId": "5ed6c28d-2469-4f32-bd16-939f2942a0de",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "## ü§ñ AI Agent Chatbot for YouTube Videos",
        "height": 380,
        "width": 580,
        "color": 6
      },
      "id": "ac051c4a-0dc7-4f75-97a7-cb4bed0c8845",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1060,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üõ†Ô∏è YouTube Video Processing Tool",
        "height": 280,
        "width": 280
      },
      "id": "1a737d98-747e-40ae-9075-2b30c93f83a6",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1360,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## OpenAI\nhttps://platform.openai.com/api-keys",
        "height": 280,
        "width": 280,
        "color": 5
      },
      "id": "54d39566-a028-48be-87d6-4412d4c53f33",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "90468bc1-9f91-49ab-bde3-d823d7ac6d05",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1160,
        860
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "content": "## Chat History Memory",
        "height": 280,
        "width": 280,
        "color": 2
      },
      "id": "fe54da1d-05e7-4da1-9347-83e1cf370710",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1060,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0.1
        }
      },
      "id": "0fce1309-2982-4579-8454-34df88e5976c",
      "name": "gpt-4o-mini1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        460,
        860
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "BmqwPw17lgbW5yKT",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=Eres un asistente de IA encargado de analizar y resumir la transcripci√≥n de un v√≠deo de YouTube. Tu funci√≥n es responder a las preguntas de los usuarios y extraer informaci√≥n relevante del contenido del v√≠deo. Adem√°s, identificar y extraer el **identificador del v√≠deo de YouTube** a partir de la informaci√≥n introducida por el usuario.\n\nTienes acceso a una herramienta llamada `youtube_video_analyzer`, que puede analizar v√≠deos de YouTube. Utiliza esta herramienta eficazmente para procesar transcripciones de v√≠deos y generar res√∫menes estructurados.\n\n#### Instrucciones:\n1. **Extraer el ID del v√≠deo de YouTube**:\n   - Identifica el **identificador de v√≠deo** a partir de la entrada del usuario.\n   - Utilice este ID para analizar el v√≠deo utilizando la herramienta `youtube_video_analyzer`.\n\n2. **Analizar y resumir**:\n   - Desglosa el contenido del v√≠deo en temas principales utilizando cabeceras de nivel 2 (##).\n  2.1. Debajo de cada encabezado:\n     - Enumera los conceptos m√°s esenciales y los puntos clave.\n     - Utiliza vi√±etas para mayor claridad\n     - Las explicaciones deben ser concisas.\n     - Preserve la precisi√≥n t√©cnica\n     - Resalte en negrita los t√©rminos clave.\n  2.2. Requisitos de formato:\n     - Utilice el formato markdown\n     - Las vi√±etas deben ser sencillas (sin anidamiento).\n     - Ponga en negrita los t√©rminos importantes utilizando **t√©rmino**.\n     - Utilice tablas para las comparaciones.\n     - Incluya detalles t√©cnicos relevantes\n3. **Requisitos de formato**:\n   - Utilice el formato markdown para mayor claridad.\n   - Utilice vi√±etas sencillas (sin listas anidadas).\n   - Utilice tablas comparativas cuando proceda.\n   - Incluya detalles t√©cnicos pertinentes cuando sea necesario.\n\nPresente un resumen claro y estructurado que capte los conceptos b√°sicos sin perder la precisi√≥n t√©cnica.\n\n#### Notas adicionales:\n- Aseg√∫rese de que sus res√∫menes sean claros, estructurados y t√©cnicamente precisos.\n- Si falta alguna informaci√≥n o no est√° clara, ind√≠quelo expl√≠citamente en su respuesta.\n\nFecha actual: {{ $now }}"
        }
      },
      "id": "8d841054-2096-49bf-8539-822b14f598df",
      "name": "YouTube Video Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1220,
        480
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "56c5bc98-fdd1-41c0-8da8-bc81a257570d",
              "name": "response",
              "type": "string",
              "value": "={{ $json.combinedTranscript || $json.trans}}"
            }
          ]
        },
        "options": {}
      },
      "id": "1f910801-a802-4e21-bc1e-383f03267711",
      "name": "Respond with YouTube Details & Transcript",
      "type": "n8n-nodes-base.set",
      "position": [
        2040,
        1400
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## üëç Try Me!",
        "height": 380,
        "width": 280,
        "color": 4
      },
      "id": "4ab8a422-90df-4efd-91dd-582cef76b865",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        760,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "name": "youtube_video_analyzer",
        "description": "Call this tool to get details and transcript from a YouTube video.  Get the videoId from the users prompt.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n\t\"videoId\": \"YouTube video id\"\n}"
      },
      "id": "a4cdd7b8-3be1-42ff-a59c-9a615c69093b",
      "name": "YouTube Processing Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1460,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üìΩÔ∏è YouTube Video AI Agent Workflow\n\nThis n8n workflow template enables users to interact with an AI agent that extracts details and the transcript of a YouTube video based on a provided video ID. Once the video details and transcript are retrieved, users can chat with the AI agent to explore or analyze the content of the video in a conversational manner.\n\n### How the Workflow Works\n1. **Input Video ID**: The user provides a YouTube video ID as input to the workflow.\n   \n2. **Data Retrieval**: The workflow fetches key details about the video (e.g., title, description, upload date) and retrieves its transcript. This involves using YouTube's Data API and other integrated tools for transcript extraction.\n\n3. **AI Agent Interaction**: The extracted details and transcript are processed by an AI-powered agent. Users can then ask questions or engage in a discussion with the agent regarding the video's content, such as summarizing the transcript, analyzing key points, or clarifying specific sections.\n\n4. **Dynamic Responses**: The AI agent uses natural language processing to provide contextual and accurate responses based on the video data, making the interaction intuitive and user-friendly.\n\n### Use Cases\n- **Content Analysis**: Quickly analyze long YouTube videos by querying specific sections or extracting summaries.\n- **Research and Learning**: Use the AI agent to gain insights from educational videos or tutorials without watching them in full.\n- **Content Creation**: Creators can use this workflow to repurpose transcripts into blogs, social media posts, or other formats.\n- **Accessibility**: Improve accessibility for users who prefer text-based interaction over watching videos.\n\n",
        "height": 780,
        "width": 620,
        "color": 3
      },
      "id": "bb254e70-e416-451e-8334-9297e6714d0c",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1660,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üõ†Ô∏è Resources for Getting Started\n\n- **Google Cloud Console** (for API setup): Visit Google Cloud's [Get Started Guide](https://cloud.google.com/docs/get-started/access-apis) to configure your API access.\n- **YouTube Data API Key Setup**: Follow this [guide](https://developers.google.com/youtube/v3/docs) to create and manage your YouTube Data API key.\n- **Install n8n Locally**: Refer to this [installation guide](https://docs.n8n.io/integrations/creating-nodes/test/run-node-locally/) for setting up n8n on your local machine.\n\n---\n\n## ‚ú® Sample Prompt\n*\"Tell me about this YouTube video with id: JWfNLF_g_V0\"*  \n \n*\"Can you provide a list of key takeaways from this video with id: [youtube-video-id]?\"*\n",
        "height": 480,
        "width": 360,
        "color": 3
      },
      "id": "8e6b8e43-bbac-4e5a-ab9f-6b23c50b156b",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üìΩÔ∏èUltimate AI-Powered Chatbot for YouTube Summarization & Analysis",
        "height": 80,
        "width": 880,
        "color": 7
      },
      "id": "f75c6462-ec46-48e7-9b82-7de7590f5422",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        760,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "google/gemini-2.0-flash-lite-preview-02-05:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        820,
        840
      ],
      "id": "eb37f66b-5927-43f5-ad41-ce04ced1a3d8",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "aDdfkNGscmtesLt4",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Gemini",
        "height": 280,
        "width": 280,
        "color": 5
      },
      "id": "3f473f3b-3f04-4f91-9032-c60955be43fe",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        760,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "https://youtube-video-summarizer-gpt-ai.p.rapidapi.com/api/v1/get-transcript-v2",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "video_id",
              "value": "={{ $json.query.videoId }}"
            },
            {
              "name": "platform",
              "value": "youtube"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-rapidapi-key",
              "value": "5fc944689fmshc8a838af0f22342p1489ecjsn37b075f5c4c3"
            },
            {
              "name": "x-rapidapi-host",
              "value": "youtube-video-summarizer-gpt-ai.p.rapidapi.com"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        1280
      ],
      "id": "b335510c-5189-440b-81e7-a2c1cdc4a635",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Initialize an empty string to hold the concatenated transcript\nlet combinedTranscript = \"\";\n\n// Safeguard against undefined paths and ensure required properties exist\nif (\n    $json.data &&\n    $json.data.transcripts &&\n    $json.data.transcripts.es_auto_auto && // Cambiado de en_auto_auto a es_auto_auto\n    $json.data.transcripts.es_auto_auto.custom\n) {\n    // Access the 'custom' array\n    const customArray = $json.data.transcripts.es_auto_auto.custom;\n\n    // Loop through the 'custom' array to extract and append the 'text' property\n    for (const item of customArray) {\n        if (item.text) {\n            combinedTranscript += item.text + \" \"; // Add a space between texts\n        }\n    }\n}\n\n// Return the combined transcript as a new field\nreturn {\n    json: {\n        combinedTranscript: combinedTranscript.trim() // Clean extra spaces\n    }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        1400
      ],
      "id": "0225d672-ed83-46be-b9a9-a3b2ceba9775",
      "name": "Code1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1a54b1d-a2e6-4ade-b209-5b8f3550478e",
              "name": "data.transcripts",
              "value": "={{ $json.data.transcripts }}",
              "type": "object"
            },
            {
              "id": "d7da5e30-1090-4c67-a3e6-b7947a0a251e",
              "name": "title",
              "value": "={{ $json.data.videoInfo.name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        900,
        1280
      ],
      "id": "815bc649-ca58-4844-b77c-a54fc1abf274",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2a716f89-cd6b-432a-b8ac-4cf16efa8276",
              "name": "transcript_final",
              "value": "={{ $json.combinedTranscript || $json.trans}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2400,
        880
      ],
      "id": "62e6e876-dc54-4a9b-ac14-e0404877b487",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "// Initialize an empty string to hold the concatenated transcript\nlet combinedTranscript = \"\";\n\n// Safeguard against undefined paths and ensure required properties exist\nif (\n    $json.data &&\n    $json.data.transcripts &&\n    $json.data.transcripts.en_auto && // Cambiado de en_auto_auto a en_auto\n    $json.data.transcripts.en_auto.custom\n) {\n    // Access the 'custom' array\n    const customArray = $json.data.transcripts.en_auto.custom;\n\n    // Loop through the 'custom' array to extract and append the 'text' property\n    for (const item of customArray) {\n        if (item.text) {\n            combinedTranscript += item.text + \" \"; // Add a space between texts\n        }\n    }\n}\n\n// Return the combined transcript as a new field\nreturn {\n    json: {\n        combinedTranscript: combinedTranscript.trim() // Clean extra spaces\n    }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        1220
      ],
      "id": "7f1b9fce-5ed8-4365-ad71-cded12d1f9f5",
      "name": "Code2",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ Object.keys($json.data.transcripts).includes(\"en_auto_auto\") }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Ingles"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "49bc3338-e491-443f-b1b2-fb8d787d40b0",
                    "leftValue": "={{ Object.keys($json.data.transcripts).includes(\"es_auto_auto\") }}",
                    "rightValue": "{\"es_auto\":",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Espa√±ol"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1120,
        1280
      ],
      "id": "77ebe9b2-fa3e-456e-aabe-7f5562b07219",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://google-translate113.p.rapidapi.com/api/v1/translator/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-rapidapi-host",
              "value": "google-translate113.p.rapidapi.com"
            },
            {
              "name": "x-rapidapi-key",
              "value": "5fc944689fmshc8a838af0f22342p1489ecjsn37b075f5c4c3"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "from",
              "value": "auto"
            },
            {
              "name": "to",
              "value": "es"
            },
            {
              "name": "text",
              "value": "={{ $json.combinedTranscript }}"
            }
          ]
        },
        "options": {}
      },
      "id": "49d07aaa-1be7-4867-a2f2-9704bf5563c4",
      "name": "Translate-text",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1720,
        1220
      ]
    },
    {
      "parameters": {
        "content": "## Youtube Transcript",
        "height": 400,
        "width": 1820,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        1180
      ],
      "id": "0b6dc497-a61d-421b-8d57-b03169014461",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "settings": {},
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-10-09T22:02:05.295Z",
      "updatedAt": "2024-10-09T22:02:05.295Z",
      "id": "L9MrGshyiPkxrtgY",
      "name": "AI_Agent"
    },
    {
      "createdAt": "2025-02-02T21:26:32.747Z",
      "updatedAt": "2025-02-02T21:26:32.747Z",
      "id": "jNSyMNOU2KoLc90J",
      "name": "youTube"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-03-03T20:35:32.000Z",
  "versionId": "c947876e-6227-438d-bb1c-2e33e95b54da"
}